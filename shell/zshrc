# -------------------------------------------------------------------
# Setup homebrew paths
# -------------------------------------------------------------------
if [[ -f "/opt/homebrew/bin/brew" ]] then
  eval "$(/opt/homebrew/bin/brew shellenv)"
fi


# -------------------------------------------------------------------
# Setup Zinit plugin manager
# -------------------------------------------------------------------
# Set the directory we want to store zinit and plugins
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

# Download Zinit, if it's not there yet
if [ ! -d "$ZINIT_HOME" ]; then
   mkdir -p "$(dirname $ZINIT_HOME)"
   git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

# Source/Load zinit
source "${ZINIT_HOME}/zinit.zsh"

# -------------------------------------------------------------------
# ZSH Plugins & applications
# -------------------------------------------------------------------

# Oh My Posh
# ------------------
if [ "$TERM_PROGRAM" != "Apple_Terminal" ]; then
  eval "$(oh-my-posh init zsh --config $HOME/.config/ohmyposh-theme.toml)"
fi

# Syntax Higlighting
# ------------------
zinit light zsh-users/zsh-syntax-highlighting

# ZSH completions
# ---------------
zinit light zsh-users/zsh-completions

# ZSH auto sugestions
# -------------------
zinit light zsh-users/zsh-autosuggestions

# FZF
# -------------------
zinit light Aloxaf/fzf-tab
eval "$(fzf --zsh)"
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no # disbale default zsh completion menu
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color $realpath' # previews of files/dirs

# Tools, aliases, commands from OhMyZsh
# -------------------------------------
zinit snippet OMZP::kubectl
zinit snippet OMZP::kubectx

# Finally - Load completions
# ----------------
autoload -Uz compinit && compinit
zinit cdreplay -q # recommended by docs to optimise compinit


# -------------------------------------------------------------------
# Keybindings
# -------------------------------------------------------------------
bindkey -e
bindkey '^p' history-search-backward
bindkey '^n' history-search-forward


# -------------------------------------------------------------------
# Aliases
# -------------------------------------------------------------------
alias oo='open .' # open current directory in OS X Finder

# Directory movement
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias 'bk=cd $OLDPWD'

# Directory information
alias ls='ls --color'
alias l='ls -GFh' # Colorize output, add file type indicator, and put sizes in human readable format
alias ll='ls -GFhl' # Same as above, but in long listing format
alias lh='ls -d .*' # show hidden files/directories only
alias '?=pwd'

# Misc
alias clr='clear'
alias ei='exit'

# Programs
alias g='nocorrect git'
alias vim='nvim'


# -------------------------------------------------------------------
# Functions
# -------------------------------------------------------------------
function take() {
  mkdir -p $1
  cd $1
}

function brewup() {
  echo "==> Running 'brew update'" && brew update &&
  echo "==> Running 'brew upgrade'" && brew upgrade &&
  echo "==> Running 'brew cleanup'" && brew cleanup
  echo "==> Running 'brew doctor'" && brew doctor
}

function extract {
  echo Extracting $1 ...
  if [ -f $1 ] ; then
      case $1 in
          *.tar.bz2)   tar xjf $1  ;;
          *.tar.gz)    tar xzf $1  ;;
          *.bz2)       bunzip2 $1  ;;
          *.rar)       unrar x $1    ;;
          *.gz)        gunzip $1   ;;
          *.tar)       tar xf $1   ;;
          *.tbz2)      tar xjf $1  ;;
          *.tgz)       tar xzf $1  ;;
          *.zip)       unzip $1   ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7z x $1  ;;
          *)        echo "'$1' cannot be extracted via extract()" ;;
      esac
  else
      echo "'$1' is not a valid file"
  fi
}


# -------------------------------------------------------------------
# Set options
# -------------------------------------------------------------------
setopt no_beep # don't beep on error
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}' # match upper and lower case for completions
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}" # add colours to completions


# -------------------------------------------------------------------
# History
# -------------------------------------------------------------------
HISTSIZE=5000
SAVEHIST=$HISTSIZE
HISTFILE=~/.zsh_history
HISTDUP=erase
setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups


# -------------------------------------------------------------------
# Extensions
#   Add zsh files to include without checking into git
# -------------------------------------------------------------------
for f in ~/.zsh_extensions/*.zsh; do
  if [ -f $f ]; then
    source $f;
  fi
done
